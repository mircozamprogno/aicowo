create table public.partners (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  first_name text not null,
  partner_uuid uuid not null default gen_random_uuid (),
  address text null,
  zip text null,
  city text null,
  country text null,
  email text null,
  piva text null,
  contract_template text null,
  privacy1 boolean not null default true,
  privacy2 boolean not null default false,
  privacy3 boolean not null default false,
  pec text null,
  sid text null,
  partner_type text null,
  partner_status text not null default 'active'::text,
  company_name text null,
  phone text null,
  logo_url text null,
  website text null,
  billing_email text null,
  billing_address text null,
  billing_zip text null,
  billing_city text null,
  billing_country text null,
  second_name text null,
  onboarding_completed boolean not null default false,
  onboarding_steps jsonb null default '{"resources_added": false, "service_created": false, "location_created": false}'::jsonb,
  fattureincloud_enabled boolean null default false,
  fattureincloud_api_token text null,
  fattureincloud_company_id text null,
  fattureincloud_default_vat integer null default 22,
  fattureincloud_document_type text null default 'proforma'::text,
  constraint partners_pkey primary key (id),
  constraint partners_email_key unique (email),
  constraint partners_uuid_key unique (partner_uuid),
  constraint partners_email_valid check (
    (
      email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text
    )
  ),
  constraint partners_partner_status_check check (
    (
      partner_status = any (
        array[
          'active'::text,
          'inactive'::text,
          'suspended'::text,
          'pending'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_partners_onboarding_completed on public.partners using btree (onboarding_completed) TABLESPACE pg_default;

create index IF not exists idx_partners_status on public.partners using btree (partner_status) TABLESPACE pg_default;

create index IF not exists idx_partners_type on public.partners using btree (partner_type) TABLESPACE pg_default;

create index IF not exists idx_partners_first_name on public.partners using btree (first_name) TABLESPACE pg_default;

create index IF not exists idx_partners_second_name on public.partners using btree (second_name) TABLESPACE pg_default;

create trigger update_partners_updated_at BEFORE
update on partners for EACH row
execute FUNCTION update_updated_at_column ();