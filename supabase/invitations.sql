create table public.invitations (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  invitation_uuid uuid not null default gen_random_uuid (),
  partner_uuid uuid not null,
  invited_role text not null,
  invited_email text not null,
  invited_first_name text null,
  invited_last_name text null,
  custom_message text null,
  expires_at timestamp with time zone not null,
  status text not null default 'pending'::text,
  used_at timestamp with time zone null,
  invited_by_user_id uuid null,
  cancelled_at timestamp with time zone null,
  constraint invitations_pkey primary key (id),
  constraint invitations_uuid_key unique (invitation_uuid),
  constraint invitations_partner_uuid_fkey foreign KEY (partner_uuid) references partners (partner_uuid) on delete CASCADE,
  constraint invitations_email_valid check (
    (
      invited_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text
    )
  ),
  constraint invitations_role_check check (
    (
      invited_role = any (array['admin'::text, 'user'::text])
    )
  ),
  constraint invitations_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'used'::text,
          'expired'::text,
          'cancelled'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_invitations_uuid on public.invitations using btree (invitation_uuid) TABLESPACE pg_default;

create index IF not exists idx_invitations_partner_uuid on public.invitations using btree (partner_uuid) TABLESPACE pg_default;

create index IF not exists idx_invitations_email on public.invitations using btree (invited_email) TABLESPACE pg_default;

create index IF not exists idx_invitations_status on public.invitations using btree (status) TABLESPACE pg_default;

create index IF not exists idx_invitations_expires_at on public.invitations using btree (expires_at) TABLESPACE pg_default;

create index IF not exists idx_invitations_cancelled_at on public.invitations using btree (cancelled_at) TABLESPACE pg_default;

create trigger update_invitations_updated_at BEFORE
update on invitations for EACH row
execute FUNCTION update_updated_at_column ();