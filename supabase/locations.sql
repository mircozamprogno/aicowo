create table public.locations (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  location_uuid uuid not null default gen_random_uuid (),
  partner_uuid uuid not null,
  location_name text not null,
  address text null,
  city text null,
  postal_code text null,
  country text null default 'Italy'::text,
  latitude numeric(10, 8) null,
  longitude numeric(11, 8) null,
  phone text null,
  email text null,
  description text null,
  timezone text null default 'Europe/Rome'::text,
  business_hours jsonb null,
  vat_percentage numeric(5, 2) null default 22.00,
  constraint locations_pkey primary key (id),
  constraint locations_uuid_key unique (location_uuid),
  constraint locations_partner_fkey foreign KEY (partner_uuid) references partners (partner_uuid) on update CASCADE on delete CASCADE,
  constraint check_latitude check (
    (
      (latitude is null)
      or (
        (latitude >= ('-90'::integer)::numeric)
        and (latitude <= (90)::numeric)
      )
    )
  ),
  constraint check_longitude check (
    (
      (longitude is null)
      or (
        (longitude >= ('-180'::integer)::numeric)
        and (longitude <= (180)::numeric)
      )
    )
  ),
  constraint locations_vat_percentage_check check (
    (
      (vat_percentage >= (0)::numeric)
      and (vat_percentage <= (100)::numeric)
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_locations_partner on public.locations using btree (partner_uuid) TABLESPACE pg_default;

create index IF not exists idx_locations_coordinates on public.locations using btree (latitude, longitude) TABLESPACE pg_default
where
  (
    (latitude is not null)
    and (longitude is not null)
  );

create index IF not exists idx_locations_city on public.locations using btree (city) TABLESPACE pg_default
where
  (city is not null);

create index IF not exists idx_locations_country on public.locations using btree (country) TABLESPACE pg_default
where
  (country is not null);

create trigger update_locations_updated_at BEFORE
update on locations for EACH row
execute FUNCTION update_updated_at_column ();